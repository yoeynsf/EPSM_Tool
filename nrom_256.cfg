SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100; # 256 bytes system stack 
}
MEMORY {
    ZP:             file = "", start = $0000, size = $0100, type = rw, define = yes;
    STACK:          file = "", start = $0100, size = $0100, type = rw, define = yes;
    OAM:            file = "", start = $0200, size = $0100, type = rw, define = yes;
    RAM:            file = "", start = $0400, size = $0300, type = rw, define = yes;
    HEADER:         file = %O, start = $0000, size = $0010, fill = yes;
   
    PRG0:   file = %O, start = $C000, size = $4000, fill = yes, define = yes;

    CHRROM: file = %O, start = $0000, size = $2000, fill = yes;                 # 1 8k CHR Bank       
}

SEGMENTS {
    ZEROPAGE:       load = ZP,          type = zp;
    INTERNALRAM:    load = RAM,         type = rw,  align = $0100,  optional  =   yes;
    HEADER:         load = HEADER,      type = ro;
    STARTUP:        load = PRG0,        type = ro,  define   = yes;
    RODATA:         load = PRG0,        type = ro,  define   = yes, optional  =   yes;     

    BANK0:          load = PRG0,        type = ro,  define   = yes, optional  =   yes;
  
    VECTORS:        load = PRG0,        type = rw,  start    = $FFFA;
    CHR:            load = CHRROM,      type = rw;
    BSS:            load = RAM,         type = bss, define   = yes, optional  =   yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
